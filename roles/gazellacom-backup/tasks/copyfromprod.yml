---

- name: "Backup  {{ gazellacom_project }} - {{ gazellacom_environment }} "
  block:

    - name: Print message if ansible version is greater than 2.7.0
      debug:
        msg: "Ansible version is  {{ ansible_version.full }}"

    - name: Get timestamp from the system
      shell: "date +%Y%m%d-%H%M"
      register: tstamp

    - name: Set variables
      set_fact:
       my_date: "{{ tstamp.stdout[0:8]}}"
       my_time: "{{ tstamp.stdout[8:]}}"

    - name: "Remoteworkdir exists: {{ gazellacom_local_workdir }}"
      become: yes
      ansible.builtin.file:
        path: "{{ gazellacom_local_workdir }}"
        state: directory
#        owner: "{{ gazellacom_awx_user }}"
#        group: "{{ gazellacom_awx_group }}"
        mode: 0775
        force: yes

    - name: "Remote directory workdir exists: {{ gazellacom_local_workdir }}/remote"
      become: yes
      ansible.builtin.file:
        path: "{{ gazellacom_local_workdir }}/remote"
        state: directory
#        owner: "{{ gazellacom_awx_user }}"
#        group: "{{ gazellacom_awx_group }}"
        mode: 0775
        force: yes

    - name: "log directory workdir exists: {{ gazellacom_local_workdir }}/remote"
      become: yes
      ansible.builtin.file:
        path: "{{ gazellacom_local_workdir }}/remote"
        state: directory
#        owner: "{{ gazellacom_awx_user }}"
#        group: "{{ gazellacom_awx_group }}"
        mode: 0775
        force: yes

    - name: "Closed all applicatioonn PSQL, PG_RESTORE and PG_DUMP"
      become: yes
      ansible.builtin.shell: "killall psql; killall pg_restore ; killall pg_dump "
      ignore_errors: yes

    - name: "Stop service wildfly"
      ansible.builtin.systemd_service:
        state: stopped
        name: wildfly

    - name: "Start get backup from production"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_remote_password }} ; pg_dump -h {{ gazellacom_db_remote_host }} -p {{ gazellacom_db_remote_port }} -U {{ gazellacom_db_remote_username }} -Fc  {{ gazellacom_db_remote_name }} >  {{ gazellacom_db_remote_name }}-{{ my_date }}{{ my_time }}.bkp "
      args:
        chdir: "{{ gazellacom_local_workdir }}/remote"

    - name: "Clean all connection"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password_main }} ; psql -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }}  -U {{ gazellacom_db_local_username_main }}  template1 -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname =  '{{ gazellacom_db_local_name }}' \" "

    - name: "Drop database from integration"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password }} ; psql -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }}  -U {{ gazellacom_db_local_username }}  template1 -c \"DROP DATABASE  {{ gazellacom_db_local_name }} \" "
      ignore_errors: yes

    - name: "Create Database on integration"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password_main }} ; psql -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }}  -U {{ gazellacom_db_local_username_main }}  template1 -c \"CREATE DATABASE {{ gazellacom_db_local_name }} \" "

    - name: "Grant Database on integration"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password_main }} ; psql -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }}  -U {{ gazellacom_db_local_username_main }}  template1 -c \"GRANT ALL PRIVILEGES ON DATABASE {{ gazellacom_db_local_name }} TO {{ gazellacom_db_local_username }}  \" "

    - name: "Set Owner Database on integration"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password_main }} ; psql -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }}  -U {{ gazellacom_db_local_username_main }}  template1 -c \"ALTER DATABASE {{ gazellacom_db_local_name }} OWNER TO {{ gazellacom_db_local_username }} \" "

    - name: "Previus settinng  Database on integration"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password_main }} ; psql -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }}  -U {{ gazellacom_db_local_username_main }}  template1 -c \"{{ gazellacom_db_previus_command }} \" "
      ignore_errors: yes

    - name: "Start RESTORING for backup"
      become: yes
      ansible.builtin.shell: "export PGPASSWORD={{ gazellacom_db_local_password }} ; pg_restore -h {{ gazellacom_db_local_host }} -p {{ gazellacom_db_local_port }} -j {{ gazellacom_db_restore_node }}  -U {{ gazellacom_db_local_username }} -Fc -d {{ gazellacom_db_local_name }}   '{{ gazellacom_db_remote_name }}-{{ my_date }}{{ my_time }}.bkp' --verbose 2 > {{ gazellacom_db_remote_name }}-{{ my_date }}{{ my_time }}.output"
      register: restoring_output
      args:
        chdir: "{{ gazellacom_local_workdir }}/remote"

    - name: "Display restoting output  log"
      ansible.builtin.debug:
        var: restoring_output.stdout
        
    - name: "Finish backup "
      become: yes
      ansible.builtin.shell: "echo '{{ my_date }}{{ my_time }} [RESTORING] Creating restoring form backup {{ gazellacom_local_workdir }}/remote/{{ gazellacom_db_remote_name }}-{{ my_date }}{{ my_time}}.bkp from the database {{ gazellacom_db_local_name }}' >> {{ gazellacom_local_workdir }}/log/copyfromprod.log"

    - name: "Start service wildfly"
      ansible.builtin.systemd_service:
        state: started
        name: wildfly

